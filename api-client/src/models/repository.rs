/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Repository {
    /// The ID of the repository
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// The ID of the project that the repository belongs to
    #[serde(rename = "project_id", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<i64>,
    /// The name of the repository
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The description of the repository
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The count of the artifacts inside the repository
    #[serde(rename = "artifact_count", skip_serializing_if = "Option::is_none")]
    pub artifact_count: Option<i64>,
    /// The count that the artifact inside the repository pulled
    #[serde(rename = "pull_count", skip_serializing_if = "Option::is_none")]
    pub pull_count: Option<i64>,
    /// The creation time of the repository
    #[serde(
        rename = "creation_time",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_time: Option<Option<String>>,
    /// The update time of the repository
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

impl Repository {
    pub fn new() -> Repository {
        Repository {
            id: None,
            project_id: None,
            name: None,
            description: None,
            artifact_count: None,
            pull_count: None,
            creation_time: None,
            update_time: None,
        }
    }
}
