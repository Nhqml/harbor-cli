/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// ReplicationExecution : The replication execution

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationExecution {
    /// The ID of the execution
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The ID if the policy that the execution belongs to
    #[serde(rename = "policy_id", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<i32>,
    /// The status of the execution
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The trigger mode
    #[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
    pub trigger: Option<String>,
    /// The start time
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// The end time
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// The status text
    #[serde(rename = "status_text", skip_serializing_if = "Option::is_none")]
    pub status_text: Option<String>,
    /// The total count of all executions
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<i32>,
    /// The count of failed executions
    #[serde(rename = "failed", skip_serializing_if = "Option::is_none")]
    pub failed: Option<i32>,
    /// The count of succeed executions
    #[serde(rename = "succeed", skip_serializing_if = "Option::is_none")]
    pub succeed: Option<i32>,
    /// The count of in_progress executions
    #[serde(rename = "in_progress", skip_serializing_if = "Option::is_none")]
    pub in_progress: Option<i32>,
    /// The count of stopped executions
    #[serde(rename = "stopped", skip_serializing_if = "Option::is_none")]
    pub stopped: Option<i32>,
}

impl ReplicationExecution {
    /// The replication execution
    pub fn new() -> ReplicationExecution {
        ReplicationExecution {
            id: None,
            policy_id: None,
            status: None,
            trigger: None,
            start_time: None,
            end_time: None,
            status_text: None,
            total: None,
            failed: None,
            succeed: None,
            in_progress: None,
            stopped: None,
        }
    }
}
