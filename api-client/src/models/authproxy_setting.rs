/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthproxySetting {
    /// The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'
    #[serde(rename = "endpoint", skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'
    #[serde(
        rename = "tokenreivew_endpoint",
        skip_serializing_if = "Option::is_none"
    )]
    pub tokenreivew_endpoint: Option<String>,
    /// The flag to determine whether Harbor can skip search the user/group when adding him as a member.
    #[serde(rename = "skip_search", skip_serializing_if = "Option::is_none")]
    pub skip_search: Option<bool>,
    /// The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.
    #[serde(rename = "verify_cert", skip_serializing_if = "Option::is_none")]
    pub verify_cert: Option<bool>,
    /// The certificate to be pinned when connecting auth proxy.
    #[serde(rename = "server_certificate", skip_serializing_if = "Option::is_none")]
    pub server_certificate: Option<String>,
}

impl AuthproxySetting {
    pub fn new() -> AuthproxySetting {
        AuthproxySetting {
            endpoint: None,
            tokenreivew_endpoint: None,
            skip_search: None,
            verify_cert: None,
            server_certificate: None,
        }
    }
}
