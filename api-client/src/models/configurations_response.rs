/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationsResponse {
    #[serde(rename = "auth_mode", skip_serializing_if = "Option::is_none")]
    pub auth_mode: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "primary_auth_mode", skip_serializing_if = "Option::is_none")]
    pub primary_auth_mode: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(rename = "ldap_base_dn", skip_serializing_if = "Option::is_none")]
    pub ldap_base_dn: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "ldap_filter", skip_serializing_if = "Option::is_none")]
    pub ldap_filter: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "ldap_group_base_dn", skip_serializing_if = "Option::is_none")]
    pub ldap_group_base_dn: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "ldap_group_admin_dn",
        skip_serializing_if = "Option::is_none"
    )]
    pub ldap_group_admin_dn: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "ldap_group_attribute_name",
        skip_serializing_if = "Option::is_none"
    )]
    pub ldap_group_attribute_name: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "ldap_group_search_filter",
        skip_serializing_if = "Option::is_none"
    )]
    pub ldap_group_search_filter: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "ldap_group_search_scope",
        skip_serializing_if = "Option::is_none"
    )]
    pub ldap_group_search_scope: Option<Box<crate::models::IntegerConfigItem>>,
    #[serde(rename = "ldap_scope", skip_serializing_if = "Option::is_none")]
    pub ldap_scope: Option<Box<crate::models::IntegerConfigItem>>,
    #[serde(rename = "ldap_search_dn", skip_serializing_if = "Option::is_none")]
    pub ldap_search_dn: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "ldap_timeout", skip_serializing_if = "Option::is_none")]
    pub ldap_timeout: Option<Box<crate::models::IntegerConfigItem>>,
    #[serde(rename = "ldap_uid", skip_serializing_if = "Option::is_none")]
    pub ldap_uid: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "ldap_url", skip_serializing_if = "Option::is_none")]
    pub ldap_url: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "ldap_verify_cert", skip_serializing_if = "Option::is_none")]
    pub ldap_verify_cert: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(
        rename = "ldap_group_membership_attribute",
        skip_serializing_if = "Option::is_none"
    )]
    pub ldap_group_membership_attribute: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "project_creation_restriction",
        skip_serializing_if = "Option::is_none"
    )]
    pub project_creation_restriction: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "read_only", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(rename = "self_registration", skip_serializing_if = "Option::is_none")]
    pub self_registration: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(rename = "token_expiration", skip_serializing_if = "Option::is_none")]
    pub token_expiration: Option<Box<crate::models::IntegerConfigItem>>,
    #[serde(rename = "uaa_client_id", skip_serializing_if = "Option::is_none")]
    pub uaa_client_id: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "uaa_client_secret", skip_serializing_if = "Option::is_none")]
    pub uaa_client_secret: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "uaa_endpoint", skip_serializing_if = "Option::is_none")]
    pub uaa_endpoint: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "uaa_verify_cert", skip_serializing_if = "Option::is_none")]
    pub uaa_verify_cert: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(
        rename = "http_authproxy_endpoint",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_authproxy_endpoint: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "http_authproxy_tokenreview_endpoint",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_authproxy_tokenreview_endpoint: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "http_authproxy_admin_groups",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_authproxy_admin_groups: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "http_authproxy_admin_usernames",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_authproxy_admin_usernames: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "http_authproxy_verify_cert",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_authproxy_verify_cert: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(
        rename = "http_authproxy_skip_search",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_authproxy_skip_search: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(
        rename = "http_authproxy_server_certificate",
        skip_serializing_if = "Option::is_none"
    )]
    pub http_authproxy_server_certificate: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "oidc_name", skip_serializing_if = "Option::is_none")]
    pub oidc_name: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "oidc_endpoint", skip_serializing_if = "Option::is_none")]
    pub oidc_endpoint: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "oidc_client_id", skip_serializing_if = "Option::is_none")]
    pub oidc_client_id: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "oidc_groups_claim", skip_serializing_if = "Option::is_none")]
    pub oidc_groups_claim: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "oidc_admin_group", skip_serializing_if = "Option::is_none")]
    pub oidc_admin_group: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "oidc_group_filter", skip_serializing_if = "Option::is_none")]
    pub oidc_group_filter: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "oidc_scope", skip_serializing_if = "Option::is_none")]
    pub oidc_scope: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "oidc_user_claim", skip_serializing_if = "Option::is_none")]
    pub oidc_user_claim: Option<Box<crate::models::StringConfigItem>>,
    #[serde(rename = "oidc_verify_cert", skip_serializing_if = "Option::is_none")]
    pub oidc_verify_cert: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(rename = "oidc_auto_onboard", skip_serializing_if = "Option::is_none")]
    pub oidc_auto_onboard: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(
        rename = "oidc_extra_redirect_parms",
        skip_serializing_if = "Option::is_none"
    )]
    pub oidc_extra_redirect_parms: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "robot_token_duration",
        skip_serializing_if = "Option::is_none"
    )]
    pub robot_token_duration: Option<Box<crate::models::IntegerConfigItem>>,
    #[serde(rename = "robot_name_prefix", skip_serializing_if = "Option::is_none")]
    pub robot_name_prefix: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "notification_enable",
        skip_serializing_if = "Option::is_none"
    )]
    pub notification_enable: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(
        rename = "quota_per_project_enable",
        skip_serializing_if = "Option::is_none"
    )]
    pub quota_per_project_enable: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(
        rename = "storage_per_project",
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_per_project: Option<Box<crate::models::IntegerConfigItem>>,
    #[serde(
        rename = "audit_log_forward_endpoint",
        skip_serializing_if = "Option::is_none"
    )]
    pub audit_log_forward_endpoint: Option<Box<crate::models::StringConfigItem>>,
    #[serde(
        rename = "skip_audit_log_database",
        skip_serializing_if = "Option::is_none"
    )]
    pub skip_audit_log_database: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(
        rename = "scanner_skip_update_pulltime",
        skip_serializing_if = "Option::is_none"
    )]
    pub scanner_skip_update_pulltime: Option<Box<crate::models::BoolConfigItem>>,
    #[serde(rename = "scan_all_policy", skip_serializing_if = "Option::is_none")]
    pub scan_all_policy: Option<Box<crate::models::ConfigurationsResponseScanAllPolicy>>,
    #[serde(rename = "session_timeout", skip_serializing_if = "Option::is_none")]
    pub session_timeout: Option<Box<crate::models::IntegerConfigItem>>,
    #[serde(rename = "banner_message", skip_serializing_if = "Option::is_none")]
    pub banner_message: Option<Box<crate::models::StringConfigItem>>,
}

impl ConfigurationsResponse {
    pub fn new() -> ConfigurationsResponse {
        ConfigurationsResponse {
            auth_mode: None,
            primary_auth_mode: None,
            ldap_base_dn: None,
            ldap_filter: None,
            ldap_group_base_dn: None,
            ldap_group_admin_dn: None,
            ldap_group_attribute_name: None,
            ldap_group_search_filter: None,
            ldap_group_search_scope: None,
            ldap_scope: None,
            ldap_search_dn: None,
            ldap_timeout: None,
            ldap_uid: None,
            ldap_url: None,
            ldap_verify_cert: None,
            ldap_group_membership_attribute: None,
            project_creation_restriction: None,
            read_only: None,
            self_registration: None,
            token_expiration: None,
            uaa_client_id: None,
            uaa_client_secret: None,
            uaa_endpoint: None,
            uaa_verify_cert: None,
            http_authproxy_endpoint: None,
            http_authproxy_tokenreview_endpoint: None,
            http_authproxy_admin_groups: None,
            http_authproxy_admin_usernames: None,
            http_authproxy_verify_cert: None,
            http_authproxy_skip_search: None,
            http_authproxy_server_certificate: None,
            oidc_name: None,
            oidc_endpoint: None,
            oidc_client_id: None,
            oidc_groups_claim: None,
            oidc_admin_group: None,
            oidc_group_filter: None,
            oidc_scope: None,
            oidc_user_claim: None,
            oidc_verify_cert: None,
            oidc_auto_onboard: None,
            oidc_extra_redirect_parms: None,
            robot_token_duration: None,
            robot_name_prefix: None,
            notification_enable: None,
            quota_per_project_enable: None,
            storage_per_project: None,
            audit_log_forward_endpoint: None,
            skip_audit_log_database: None,
            scanner_skip_update_pulltime: None,
            scan_all_policy: None,
            session_timeout: None,
            banner_message: None,
        }
    }
}
