/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchRepository {
    /// The ID of the project that the repository belongs to
    #[serde(rename = "project_id", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<i32>,
    /// The name of the project that the repository belongs to
    #[serde(rename = "project_name", skip_serializing_if = "Option::is_none")]
    pub project_name: Option<String>,
    /// The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)
    #[serde(rename = "project_public", skip_serializing_if = "Option::is_none")]
    pub project_public: Option<bool>,
    /// The name of the repository
    #[serde(rename = "repository_name", skip_serializing_if = "Option::is_none")]
    pub repository_name: Option<String>,
    /// The count how many times the repository is pulled
    #[serde(rename = "pull_count", skip_serializing_if = "Option::is_none")]
    pub pull_count: Option<i32>,
    /// The count of artifacts in the repository
    #[serde(rename = "artifact_count", skip_serializing_if = "Option::is_none")]
    pub artifact_count: Option<i32>,
}

impl SearchRepository {
    pub fn new() -> SearchRepository {
        SearchRepository {
            project_id: None,
            project_name: None,
            project_public: None,
            repository_name: None,
            pull_count: None,
            artifact_count: None,
        }
    }
}
