/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// WorkerPool : the worker pool of job service

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkerPool {
    /// the process id of jobservice
    #[serde(rename = "pid", skip_serializing_if = "Option::is_none")]
    pub pid: Option<i32>,
    /// the id of the worker pool
    #[serde(rename = "worker_pool_id", skip_serializing_if = "Option::is_none")]
    pub worker_pool_id: Option<String>,
    /// The start time of the work pool
    #[serde(rename = "start_at", skip_serializing_if = "Option::is_none")]
    pub start_at: Option<String>,
    /// The heartbeat time of the work pool
    #[serde(rename = "heartbeat_at", skip_serializing_if = "Option::is_none")]
    pub heartbeat_at: Option<String>,
    /// The concurrency of the work pool
    #[serde(rename = "concurrency", skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i32>,
    /// The host of the work pool
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
}

impl WorkerPool {
    /// the worker pool of job service
    pub fn new() -> WorkerPool {
        WorkerPool {
            pid: None,
            worker_pool_id: None,
            start_at: None,
            heartbeat_at: None,
            concurrency: None,
            host: None,
        }
    }
}
