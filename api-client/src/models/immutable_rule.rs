/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImmutableRule {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(rename = "params", skip_serializing_if = "Option::is_none")]
    pub params: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "tag_selectors", skip_serializing_if = "Option::is_none")]
    pub tag_selectors: Option<Vec<crate::models::ImmutableSelector>>,
    #[serde(rename = "scope_selectors", skip_serializing_if = "Option::is_none")]
    pub scope_selectors:
        Option<::std::collections::HashMap<String, Vec<crate::models::ImmutableSelector>>>,
}

impl ImmutableRule {
    pub fn new() -> ImmutableRule {
        ImmutableRule {
            id: None,
            priority: None,
            disabled: None,
            action: None,
            template: None,
            params: None,
            tag_selectors: None,
            scope_selectors: None,
        }
    }
}
