/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Reference {
    /// The parent ID of the reference
    #[serde(rename = "parent_id", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<i64>,
    /// The child ID of the reference
    #[serde(rename = "child_id", skip_serializing_if = "Option::is_none")]
    pub child_id: Option<i64>,
    /// The digest of the child artifact
    #[serde(rename = "child_digest", skip_serializing_if = "Option::is_none")]
    pub child_digest: Option<String>,
    #[serde(rename = "platform", skip_serializing_if = "Option::is_none")]
    pub platform: Option<Box<crate::models::Platform>>,
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<::std::collections::HashMap<String, String>>,
    /// The download URLs
    #[serde(rename = "urls", skip_serializing_if = "Option::is_none")]
    pub urls: Option<Vec<String>>,
}

impl Reference {
    pub fn new() -> Reference {
        Reference {
            parent_id: None,
            child_id: None,
            child_digest: None,
            platform: None,
            annotations: None,
            urls: None,
        }
    }
}
