/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectMetadata {
    /// The public status of the project. The valid values are \"true\", \"false\".
    #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
    pub public: Option<String>,
    /// Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project. The valid values are \"true\", \"false\".
    #[serde(
        rename = "enable_content_trust",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_content_trust: Option<Option<String>>,
    /// Whether cosign content trust is enabled or not. If it is enabled, user can't pull images without cosign signature from this project. The valid values are \"true\", \"false\".
    #[serde(
        rename = "enable_content_trust_cosign",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_content_trust_cosign: Option<Option<String>>,
    /// Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".
    #[serde(
        rename = "prevent_vul",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub prevent_vul: Option<Option<String>>,
    /// If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".
    #[serde(
        rename = "severity",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub severity: Option<Option<String>>,
    /// Whether scan images automatically when pushing. The valid values are \"true\", \"false\".
    #[serde(
        rename = "auto_scan",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_scan: Option<Option<String>>,
    /// Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.
    #[serde(
        rename = "reuse_sys_cve_allowlist",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub reuse_sys_cve_allowlist: Option<Option<String>>,
    /// The ID of the tag retention policy for the project
    #[serde(
        rename = "retention_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub retention_id: Option<Option<String>>,
}

impl ProjectMetadata {
    pub fn new() -> ProjectMetadata {
        ProjectMetadata {
            public: None,
            enable_content_trust: None,
            enable_content_trust_cosign: None,
            prevent_vul: None,
            severity: None,
            auto_scan: None,
            reuse_sys_cve_allowlist: None,
            retention_id: None,
        }
    }
}
