/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// Quota : The quota object

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Quota {
    /// ID of the quota
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "ref", skip_serializing_if = "Option::is_none")]
    pub r#ref: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "hard", skip_serializing_if = "Option::is_none")]
    pub hard: Option<::std::collections::HashMap<String, i64>>,
    #[serde(rename = "used", skip_serializing_if = "Option::is_none")]
    pub used: Option<::std::collections::HashMap<String, i64>>,
    /// the creation time of the quota
    #[serde(rename = "creation_time", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    /// the update time of the quota
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

impl Quota {
    /// The quota object
    pub fn new() -> Quota {
        Quota {
            id: None,
            r#ref: None,
            hard: None,
            used: None,
            creation_time: None,
            update_time: None,
        }
    }
}
