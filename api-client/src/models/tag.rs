/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Tag {
    /// The ID of the tag
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// The ID of the repository that the tag belongs to
    #[serde(rename = "repository_id", skip_serializing_if = "Option::is_none")]
    pub repository_id: Option<i64>,
    /// The ID of the artifact that the tag attached to
    #[serde(rename = "artifact_id", skip_serializing_if = "Option::is_none")]
    pub artifact_id: Option<i64>,
    /// The name of the tag
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The push time of the tag
    #[serde(rename = "push_time", skip_serializing_if = "Option::is_none")]
    pub push_time: Option<String>,
    /// The latest pull time of the tag
    #[serde(rename = "pull_time", skip_serializing_if = "Option::is_none")]
    pub pull_time: Option<String>,
    /// The immutable status of the tag
    #[serde(rename = "immutable", skip_serializing_if = "Option::is_none")]
    pub immutable: Option<bool>,
}

impl Tag {
    pub fn new() -> Tag {
        Tag {
            id: None,
            repository_id: None,
            artifact_id: None,
            name: None,
            push_time: None,
            pull_time: None,
            immutable: None,
        }
    }
}
