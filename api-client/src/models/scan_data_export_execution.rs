/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// ScanDataExportExecution : The replication execution

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScanDataExportExecution {
    /// The ID of the execution
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The ID if the user triggering the export job
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// The status of the execution
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The trigger mode
    #[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
    pub trigger: Option<String>,
    /// The start time
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// The end time
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// The status text
    #[serde(rename = "status_text", skip_serializing_if = "Option::is_none")]
    pub status_text: Option<String>,
    /// The name of the user triggering the job
    #[serde(rename = "user_name", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    /// Indicates whether the export artifact is present in registry
    #[serde(rename = "file_present", skip_serializing_if = "Option::is_none")]
    pub file_present: Option<bool>,
}

impl ScanDataExportExecution {
    /// The replication execution
    pub fn new() -> ScanDataExportExecution {
        ScanDataExportExecution {
            id: None,
            user_id: None,
            status: None,
            trigger: None,
            start_time: None,
            end_time: None,
            status_text: None,
            user_name: None,
            file_present: None,
        }
    }
}
