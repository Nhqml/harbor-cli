/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`create_webhook_policy_of_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateWebhookPolicyOfProjectError {
    Status400(crate::models::Errors),
    Status401(crate::models::Errors),
    Status403(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_webhook_policy_of_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteWebhookPolicyOfProjectError {
    Status400(crate::models::Errors),
    Status401(crate::models::Errors),
    Status403(crate::models::Errors),
    Status404(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_logs_of_webhook_task`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLogsOfWebhookTaskError {
    Status400(crate::models::Errors),
    Status401(crate::models::Errors),
    Status404(crate::models::Errors),
    Status403(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_supported_event_types`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSupportedEventTypesError {
    Status401(crate::models::Errors),
    Status403(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_webhook_policy_of_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWebhookPolicyOfProjectError {
    Status400(crate::models::Errors),
    Status401(crate::models::Errors),
    Status403(crate::models::Errors),
    Status404(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`last_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LastTriggerError {
    Status400(crate::models::Errors),
    Status401(crate::models::Errors),
    Status403(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_executions_of_webhook_policy`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListExecutionsOfWebhookPolicyError {
    Status400(crate::models::Errors),
    Status401(crate::models::Errors),
    Status404(crate::models::Errors),
    Status403(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_tasks_of_webhook_execution`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTasksOfWebhookExecutionError {
    Status400(crate::models::Errors),
    Status401(crate::models::Errors),
    Status404(crate::models::Errors),
    Status403(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_webhook_policies_of_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListWebhookPoliciesOfProjectError {
    Status400(crate::models::Errors),
    Status401(crate::models::Errors),
    Status403(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_webhook_policy_of_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateWebhookPolicyOfProjectError {
    Status400(crate::models::Errors),
    Status401(crate::models::Errors),
    Status403(crate::models::Errors),
    Status404(crate::models::Errors),
    Status500(crate::models::Errors),
    UnknownValue(serde_json::Value),
}

/// This endpoint create a webhook policy if the project does not have one.
pub async fn create_webhook_policy_of_project(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    policy: crate::models::WebhookPolicy,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
) -> Result<(), Error<CreateWebhookPolicyOfProjectError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/projects/{project_name_or_id}/webhook/policies",
        local_var_configuration.base_path,
        project_name_or_id = crate::apis::urlencode(project_name_or_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };
    local_var_req_builder = local_var_req_builder.json(&policy);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CreateWebhookPolicyOfProjectError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This endpoint is aimed to delete webhookpolicy of a project.
pub async fn delete_webhook_policy_of_project(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    webhook_policy_id: i64,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
) -> Result<(), Error<DeleteWebhookPolicyOfProjectError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}",
        local_var_configuration.base_path,
        project_name_or_id = crate::apis::urlencode(project_name_or_id),
        webhook_policy_id = webhook_policy_id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteWebhookPolicyOfProjectError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This endpoint returns the logs of a specific webhook task.
pub async fn get_logs_of_webhook_task(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    webhook_policy_id: i64,
    execution_id: i32,
    task_id: i32,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
) -> Result<String, Error<GetLogsOfWebhookTaskError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}/executions/{execution_id}/tasks/{task_id}/log", local_var_configuration.base_path, project_name_or_id=crate::apis::urlencode(project_name_or_id), webhook_policy_id=webhook_policy_id, execution_id=execution_id, task_id=task_id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetLogsOfWebhookTaskError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get supported event types and notify types.
pub async fn get_supported_event_types(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
) -> Result<crate::models::SupportedWebhookEventTypes, Error<GetSupportedEventTypesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/projects/{project_name_or_id}/webhook/events",
        local_var_configuration.base_path,
        project_name_or_id = crate::apis::urlencode(project_name_or_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSupportedEventTypesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This endpoint returns specified webhook policy of a project.
pub async fn get_webhook_policy_of_project(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    webhook_policy_id: i64,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
) -> Result<crate::models::WebhookPolicy, Error<GetWebhookPolicyOfProjectError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}",
        local_var_configuration.base_path,
        project_name_or_id = crate::apis::urlencode(project_name_or_id),
        webhook_policy_id = webhook_policy_id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetWebhookPolicyOfProjectError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This endpoint returns last trigger information of project webhook policy.
pub async fn last_trigger(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
) -> Result<Vec<crate::models::WebhookLastTrigger>, Error<LastTriggerError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/projects/{project_name_or_id}/webhook/lasttrigger",
        local_var_configuration.base_path,
        project_name_or_id = crate::apis::urlencode(project_name_or_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<LastTriggerError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This endpoint returns the executions of a specific webhook policy.
pub async fn list_executions_of_webhook_policy(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    webhook_policy_id: i64,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
    page: Option<i64>,
    page_size: Option<i64>,
    q: Option<&str>,
    sort: Option<&str>,
) -> Result<Vec<crate::models::Execution>, Error<ListExecutionsOfWebhookPolicyError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}/executions",
        local_var_configuration.base_path,
        project_name_or_id = crate::apis::urlencode(project_name_or_id),
        webhook_policy_id = webhook_policy_id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder =
            local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListExecutionsOfWebhookPolicyError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This endpoint returns the tasks of a specific webhook execution.
pub async fn list_tasks_of_webhook_execution(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    webhook_policy_id: i64,
    execution_id: i32,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
    page: Option<i64>,
    page_size: Option<i64>,
    q: Option<&str>,
    sort: Option<&str>,
) -> Result<Vec<crate::models::Task>, Error<ListTasksOfWebhookExecutionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}/executions/{execution_id}/tasks", local_var_configuration.base_path, project_name_or_id=crate::apis::urlencode(project_name_or_id), webhook_policy_id=webhook_policy_id, execution_id=execution_id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder =
            local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListTasksOfWebhookExecutionError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This endpoint returns webhook policies of a project.
pub async fn list_webhook_policies_of_project(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
    sort: Option<&str>,
    q: Option<&str>,
    page: Option<i64>,
    page_size: Option<i64>,
) -> Result<Vec<crate::models::WebhookPolicy>, Error<ListWebhookPoliciesOfProjectError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/projects/{project_name_or_id}/webhook/policies",
        local_var_configuration.base_path,
        project_name_or_id = crate::apis::urlencode(project_name_or_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = sort {
        local_var_req_builder =
            local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListWebhookPoliciesOfProjectError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This endpoint is aimed to update the webhook policy of a project.
pub async fn update_webhook_policy_of_project(
    configuration: &configuration::Configuration,
    project_name_or_id: &str,
    webhook_policy_id: i64,
    policy: crate::models::WebhookPolicy,
    x_request_id: Option<&str>,
    x_is_resource_name: Option<bool>,
) -> Result<(), Error<UpdateWebhookPolicyOfProjectError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}",
        local_var_configuration.base_path,
        project_name_or_id = crate::apis::urlencode(project_name_or_id),
        webhook_policy_id = webhook_policy_id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_request_id {
        local_var_req_builder =
            local_var_req_builder.header("X-Request-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_is_resource_name {
        local_var_req_builder =
            local_var_req_builder.header("X-Is-Resource-Name", local_var_param_value.to_string());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };
    local_var_req_builder = local_var_req_builder.json(&policy);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UpdateWebhookPolicyOfProjectError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
