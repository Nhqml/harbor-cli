/*
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::Client,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub bearer_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug, Clone)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }

    pub fn base_path<T: Into<String>>(mut self, base_path: T) -> Configuration {
        self.base_path = base_path.into();
        self
    }

    pub fn user_agent<T: Into<String>>(mut self, user_agent: T) -> Configuration {
        self.user_agent = Some(user_agent.into());
        self
    }

    pub fn basic_auth<T: Into<String>, U: Into<String>>(
        mut self,
        username: T,
        password: Option<U>,
    ) -> Configuration {
        self.basic_auth = Some((username.into(), password.map(Into::into)));
        self
    }

    pub fn oauth_access_token<T: Into<String>>(mut self, oauth_access_token: T) -> Configuration {
        self.oauth_access_token = Some(oauth_access_token.into());
        self
    }

    pub fn bearer_access_token<T: Into<String>>(mut self, bearer_access_token: T) -> Configuration {
        self.bearer_access_token = Some(bearer_access_token.into());
        self
    }

    pub fn api_key<T: Into<String>>(mut self, prefix: Option<String>, key: T) -> Configuration {
        self.api_key = Some(ApiKey {
            prefix,
            key: key.into(),
        });
        self
    }
}

impl Default for Configuration {
    fn default() -> Self {
        Configuration {
            base_path: "http://localhost/api/v2.0".to_owned(),
            user_agent: Some("OpenAPI-Generator/2.0/rust".to_owned()),
            client: reqwest::Client::new(),
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: None,
            api_key: None,
        }
    }
}
